$version 11.00

$rect <940,138,1110,178>
$output false
const string CallTxt = "\xe0b0";

$rect <940,178,1110,218>
$output false
const string MessageIconTxt = "\xe253";

$rect <940,348,1110,388>
$output false
const string BackIconTxt = "\xe5e0";

$rect <940,298,1110,338>
$output false
const string EditIconTxt = "\xe3c9";

$rect <940,218,1110,258>
$output false
const string UserIconTxt = "\xe853";

$rect <940,258,1110,298>
$output false
const string PlusIconTxt = "\xe145";

$rect <940,388,1110,428>
$output false
const string SerachIconTxt = "\xe8b6";

$rect <940,428,1110,468>
$output false
const string CkeckIconTxt = "\xe876";

$rect <940,468,1110,508>
$output false
const string CloseIconTxt = "\xe5cd";

// Font and color.
note group Note4
{
  attr Bounds = <440,10,870,360>;
}

// The global autoobject Res::SlideDownCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the top \
// edge of its owner component and continues moving vertically until it reaches the \
// owner's center position. When using the transition for the fade-out operation, \
// the component slides down until it leaves the visible area of its owner component. \
// Additionally, while the transitions are performed, the opacity of the GUI component \
// fades-in or fades-out accordingly. This transition is thus ideal wherever one \
// GUI component should smoothly slide-in/out in context of another component. The \
// duration of the transition is configured per default to take 500 ms and the timing \
// is configured to start fast and then slow down the animation (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <450,580,700,620>
$output false
autoobject Effects::SlideTransition SlideDownCentered
{
  preset Duration = 200;
  preset Direction = Core::Direction.Bottom;
}

// The global autoobject Res::SlideUpCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the bottom \
// edge of its owner component and continues moving vertically until it reaches the \
// owner's center position. When using the transition for the fade-out operation, \
// the component slides up until it leaves the visible area of its owner component. \
// Additionally, while the transitions are performed, the opacity of the GUI component \
// fades-in or fades-out accordingly. This transition is thus ideal wherever one \
// GUI component should smoothly slide-in/out in context of another component. The \
// duration of the transition is configured per default to take 500 ms and the timing \
// is configured to start fast and then slow down the animation (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <450,540,700,580>
$output false
autoobject Effects::SlideTransition SlideUpCentered
{
  preset Duration = 200;
  preset Direction = Core::Direction.Top;
}

// The global autoobject Res::SlideRightCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the left \
// edge of its owner component and continues moving horizontally until it reaches \
// the owner's center position. When using the transition for the fade-out operation, \
// the component slides to the right until it leaves the visible area of its owner \
// component. Additionally, while the transitions are performed, the opacity of the \
// GUI component fades-in or fades-out accordingly. This transition is thus ideal \
// wherever one GUI component should smoothly slide-in/out in context of another \
// component. The duration of the transition is configured per default to take 500 \
// ms and the timing is configured to start fast and then slow down the animation \
// (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <450,500,700,540>
$output false
autoobject Effects::SlideTransition SlideRightCentered
{
  preset Duration = 200;
  preset Direction = Core::Direction.Right;
}

$rect <450,50,650,90>
$output false
resource Resources::Font TitileFont32
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 32;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <470,220,670,260>
$output false
resource Resources::Font ContactFont15
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 15;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <470,260,670,300>
$output false
resource Resources::Font ContactFontBold15
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 15;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = true;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <910,98,1110,138>
$output false
resource Resources::Font IconsFont25
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 25;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe02b, 0xe029, 0xe31a, 0xe050, 0xe04b, 0xe145, 0xe853, 0xe0b1, 0xe3c9, 0xe5e0, 0xe8b6, 0xe876, 0xe5cd, 0xe5ce, 0xe5cf, 0xe02b, 0xe04e, 0xe0b0, 0xe14a;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <219,413,419,453>
$output false
const color BlueLight = #7C8FFFF4;

$rect <20,450,220,490>
$output false
const color Grey = #BCBCBCFD;

$rect <1120,138,1290,178>
$output false
const string MicTxt = "\xe029";

$rect <1120,178,1290,218>
$output false
const string MicOffTxt = "\xe02b";

$rect <1120,218,1290,258>
$output false
const string KeypadTxt = "\xe31a";

$rect <220,450,420,490>
$output false
const color GeryLight = #F0F0F0FD;

$rect <1120,258,1290,298>
$output false
const string SpeakerTxt = "\xe050";

$rect <20,650,220,690>
$output false
const color Black = #181818FF;

$rect <1120,338,1290,378>
$output false
const string EndCallTxt = "\xe0b1";

$rect <450,90,650,130>
$output false
resource Resources::Font TitileFont29
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 29;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <1120,298,1290,338>
$output false
const string VideoCallTxt = "\xe04b";

$rect <910,58,1110,98>
$output false
resource Resources::Font IconsFont30
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 40;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe14a;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

// Icon fonts
note group Note6
{
  attr Bounds = <900,8,1319,591>;
}

// Effects
note group Note7
{
  attr Bounds = <440,370,870,720>;
}

$rect <1110,58,1310,98>
$output false
resource Resources::Font IconsFont20
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 20;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe04b, 0xe0b0, 0xe87d, 0xe31a, 0xe14a;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <450,130,650,170>
$output false
resource Resources::Font TitileFont25
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 25;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <220,610,420,650>
$output false
const color WhiteTransparent = #FFFFFF26;

$rect <20,490,220,530>
$output false
const color Red = #B5280FFF;

$rect <19,413,219,453>
$output false
const color Blue = #1B0BFFFF;

$rect <1120,418,1290,458>
$output false
const string DownTxt = "\xe5cf";

$rect <1120,378,1290,418>
$output false
const string Uptxt = "\xe5ce";

$rect <1120,458,1290,498>
$output false
const string SpeakeroffTxt = "\xe04e";

// Colors
note group Note8
{
  attr Bounds = <0,370,420,720>;
}

$rect <220,490,420,530>
$output false
const color RedLight = #E83C32EE;

$rect <670,220,870,260>
$output false
resource Resources::Font ContactFont12
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 12;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <220,570,420,610>
$output false
const color WhiteSemiTransparent = #FFFFFF73;

$rect <20,570,220,610>
$output false
const color White = #FFFFFFF9;

$rect <20,530,220,570>
$output false
const color Green = #129915FF;

$rect <220,530,420,570>
$output false
const color GreenDark = #0C6B0EFF;

$rect <20,610,220,650>
$output false
const color Transparent = #FFFFFF00;

// Bitmap recorces.
note group Note5
{
  attr Bounds = <0,3,420,353>;
}

$rect <10,43,210,83>
$output false
resource Resources::Bitmap AddIcon
{
  attr bitmapfile FileName = .\Res\AddIcon.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,83,210,123>
$output false
resource Resources::Bitmap SearchIcon
{
  attr bitmapfile FileName = .\Res\SearchIcon.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,123,210,163>
$output false
resource Resources::Bitmap BackIcon
{
  attr bitmapfile FileName = .\Res\BackIcon.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,163,210,203>
$output false
resource Resources::Bitmap PhoneIcon
{
  attr bitmapfile FileName = .\Res\PhonIcon.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,203,210,243>
$output false
resource Resources::Bitmap MessageIcon
{
  attr bitmapfile FileName = .\Res\MessageIcon.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,243,210,283>
$output false
resource Resources::Bitmap UserIcon
{
  attr bitmapfile FileName = .\Res\UserIcon.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <210,43,410,83>
$output false
resource Resources::Bitmap ButtonRoundMedium
{
  attr bitmapfile FileName = .\Res\circleMedium.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <210,83,410,123>
$output false
resource Resources::Bitmap ButtonRoundBig
{
  attr bitmapfile FileName = .\Res\circleBig.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <210,123,410,163>
$output false
resource Resources::Bitmap ButtonRoundSmall
{
  attr bitmapfile FileName = .\Res\circleSmall.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <210,163,410,203>
$output false
resource Resources::Bitmap SearchButton
{
  attr bitmapfile FileName = .\Res\PushButton.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <220,203,420,243>
$output false
resource Resources::Bitmap ButtonRoundMedium1
{
  attr bitmapfile FileName = .\Res\callButton.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// The global autoobject Res::FadeInOutCentered represents the fade-in/out operation \
// affecting the opacity of a given GUI component. When using the transition for \
// the fade-in operation, the GUI component is automatically arranged to appear centered \
// within the area of its owner component. This transition is thus ideal wherever \
// one GUI component should smoothly appear or disappear in context of another component. \
// The duration of the transition is configured per default to take 500 ms.
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <450,420,700,460>
$output false
autoobject Effects::FadeInOutTransition FadeInOutCentered
{
  preset Duration = 200;
}

// The global autoobject Res::SlideLeftCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the right \
// edge of its owner component and continues moving horizontally until it reaches \
// the owner's center position. When using the transition for the fade-out operation, \
// the component slides to the left until it leaves the visible area of its owner \
// component. Additionally, while the transitions are performed, the opacity of the \
// GUI component fades-in or fades-out accordingly. This transition is thus ideal \
// wherever one GUI component should smoothly slide-in/out in context of another \
// component. The duration of the transition is configured per default to take 500 \
// ms and the timing is configured to start fast and then slow down the animation \
// (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <450,460,700,500>
$output false
autoobject Effects::SlideTransition SlideLeftCentered
{
  preset Duration = 200;
  preset Direction = Core::Direction.Left;
}

$rect <1119,501,1289,541>
$output false
const string HeartTxt = "\xe87d";

$rect <1254,344,1454,384>
$output false
const string Backspace = "\xe14a";

$rect <220,650,420,690>
$output false
const color PressColor = #F8F8F8D5;
