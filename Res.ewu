$version 11.00

$rect <880,328,1050,368>
$output false
const string CallIcon = "\xe0b0";

$rect <700,170,870,210>
$output false
const string MessageIcon = "\xe253";

$rect <700,330,870,370>
$output false
const string BackIcon = "\xe5e0";

$rect <700,290,870,330>
$output false
const string EditIcon = "\xe3c9";

$rect <700,210,870,250>
$output false
const string UserIcon = "\xe853";

$rect <700,250,870,290>
$output false
const string PlusIcon = "\xe145";

$rect <700,370,870,410>
$output false
const string SerachIcon = "\xe8b6";

$rect <700,410,870,450>
$output false
const string CkeckIcon = "\xe876";

$rect <700,450,870,490>
$output false
const string CloseIcon = "\xe5cd";

// Fonts
note group Fonts
{
  attr Bounds = <230,0,649,269>;
}

// The global autoobject Res::SlideDownCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the top \
// edge of its owner component and continues moving vertically until it reaches the \
// owner's center position. When using the transition for the fade-out operation, \
// the component slides down until it leaves the visible area of its owner component. \
// Additionally, while the transitions are performed, the opacity of the GUI component \
// fades-in or fades-out accordingly. This transition is thus ideal wherever one \
// GUI component should smoothly slide-in/out in context of another component. The \
// duration of the transition is configured per default to take 500 ms and the timing \
// is configured to start fast and then slow down the animation (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <670,810,870,850>
$output false
autoobject Effects::SlideTransition SlideDownCentered
{
  preset MarginBottom = 75;
  preset MarginRight = 21;
  preset MarginTop = 75;
  preset MarginLeft = 21;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Bottom;
}

// The global autoobject Res::SlideUpCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the bottom \
// edge of its owner component and continues moving vertically until it reaches the \
// owner's center position. When using the transition for the fade-out operation, \
// the component slides up until it leaves the visible area of its owner component. \
// Additionally, while the transitions are performed, the opacity of the GUI component \
// fades-in or fades-out accordingly. This transition is thus ideal wherever one \
// GUI component should smoothly slide-in/out in context of another component. The \
// duration of the transition is configured per default to take 500 ms and the timing \
// is configured to start fast and then slow down the animation (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <670,770,870,810>
$output false
autoobject Effects::SlideTransition SlideUpCentered
{
  preset MarginBottom = 75;
  preset MarginRight = 21;
  preset MarginTop = 75;
  preset MarginLeft = 0;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Top;
}

// The global autoobject Res::SlideRightCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the left \
// edge of its owner component and continues moving horizontally until it reaches \
// the owner's center position. When using the transition for the fade-out operation, \
// the component slides to the right until it leaves the visible area of its owner \
// component. Additionally, while the transitions are performed, the opacity of the \
// GUI component fades-in or fades-out accordingly. This transition is thus ideal \
// wherever one GUI component should smoothly slide-in/out in context of another \
// component. The duration of the transition is configured per default to take 500 \
// ms and the timing is configured to start fast and then slow down the animation \
// (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <670,730,870,770>
$output false
autoobject Effects::SlideTransition SlideRightCentered
{
  preset MarginBottom = 75;
  preset MarginRight = 0;
  preset MarginTop = 75;
  preset MarginLeft = 21;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Right;
}

$rect <240,40,440,80>
$output false
resource Resources::Font TitileFont32
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 32;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <440,40,640,80>
$output false
resource Resources::Font ContactFont15
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 15;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <440,80,640,120>
$output false
resource Resources::Font ContactFontBold15
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 15;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = true;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <870,40,1070,80>
$output false
resource Resources::Font IconsFont25
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 25;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe02b, 0xe029, 0xe31a, 0xe050, 0xe04b, 0xe145, 0xe853, 0xe0b1, 0xe3c9, 0xe5e0, 0xe8b6, 0xe876, 0xe5cd, 0xe5ce, 0xe5cf, 0xe02b, 0xe04e, 0xe0b0, 0xe14a, 0xe649, 0xe61c, 0xe15b,0xe88e, 0xe5d2, 0xe5ca, 0xe745, 0xe163, 0xe5e1, 0xe5e0, 0xe253, 0xe836, 0xe8b8;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <1100,643,1300,683>
$output false
const color BlueLight = #7C8FFFF4;

$rect <901,680,1101,720>
$output false
const color Grey = #BCBCBCFD;

$rect <700,90,870,130>
$output false
const string MicIcon = "\xe029";

$rect <700,130,870,170>
$output false
const string MicOffIcon = "\xe02b";

$rect <880,90,1050,130>
$output false
const string KeypadIcon = "\xe31a";

$rect <1101,680,1301,720>
$output false
const color GreyLight = #F0F0F0FD;

$rect <880,130,1050,170>
$output false
const string SpeakerIcon = "\xe050";

$rect <901,880,1101,920>
$output false
const color Black = #181818FF;

$rect <880,210,1050,250>
$output false
const string EndCallIcon = "\xe0b1";

$rect <240,80,440,120>
$output false
resource Resources::Font TitileFont29
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 29;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <880,170,1050,210>
$output false
const string VideoCallIcon = "\xe04b";

$rect <670,40,870,80>
$output false
resource Resources::Font IconsFont30
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 40;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe14a,0xe649, 0xe61c,0xe15b, 0xe88e, 0xe5d2, 0xe5ca, 0xe0ca, 0xe745, 0xe163, 0xe5e1, 0xe836, 0xe8b8;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

// Icon fonts
note group Note6
{
  attr Bounds = <660,0,1280,590>;
}

// Effects
note group Note7
{
  attr Bounds = <660,600,880,950>;
}

$rect <1070,40,1270,80>
$output false
resource Resources::Font IconsFont20
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 20;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe04b, 0xe0b0, 0xe87d, 0xe31a, 0xe14a, 0xe649, 0xe61c,0xe15b, 0xe88e, 0xe5d2, 0xe0b5, 0xe0e4, 0xe0b2,0xe5ca, 0xe745, 0xe836, 0xe163, 0xe5e1, 0xe836,0xe8b8;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <240,120,440,160>
$output false
resource Resources::Font TitileFont25
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 25;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <1101,840,1301,880>
$output false
const color WhiteTransparent = #FFFFFF26;

$rect <901,720,1101,760>
$output false
const color Red = #B5280FFF;

$rect <900,640,1100,680>
$output false
const color Blue = #1B0BFFFF;

$rect <1060,90,1230,130>
$output false
const string DownIcon = "\xe5cf";

$rect <880,370,1050,410>
$output false
const string UpIcon = "\xe5ce";

$rect <880,450,1050,490>
$output false
const string SpeakeroffIcon = "\xe04e";

// Colors
note group Note8
{
  attr Bounds = <890,600,1310,950>;
}

$rect <1101,720,1301,760>
$output false
const color RedLight = #E83C32EE;

$rect <440,120,640,160>
$output false
resource Resources::Font ContactFont12
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 12;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <1101,800,1301,840>
$output false
const color WhiteSemiTransparent = #FFFFFF73;

$rect <901,800,1101,840>
$output false
const color White = #FFFFFFFF;

$rect <901,760,1101,800>
$output false
const color Green = #129915FF;

$rect <1101,760,1301,800>
$output false
const color GreenDark = #0C6B0EFF;

$rect <901,840,1101,880>
$output false
const color Transparent = #FFFFFF00;

// Bitmaps
note group Note5
{
  attr Bounds = <0,0,220,420>;
}

$rect <10,90,210,130>
$output false
resource Resources::Bitmap ButtonRoundMedium
{
  attr bitmapfile FileName = .\Res\circleMedium.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,50,210,90>
$output false
resource Resources::Bitmap ButtonRoundBig
{
  attr bitmapfile FileName = .\Res\circleBig.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,170,210,210>
$output false
resource Resources::Bitmap ButtonRoundSmall
{
  attr bitmapfile FileName = .\Res\circleSmall.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,130,210,170>
$output false
resource Resources::Bitmap ButtonRoundMedium1
{
  attr bitmapfile FileName = .\Res\callButton.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// The global autoobject Res::FadeInOutCentered represents the fade-in/out operation \
// affecting the opacity of a given GUI component. When using the transition for \
// the fade-in operation, the GUI component is automatically arranged to appear centered \
// within the area of its owner component. This transition is thus ideal wherever \
// one GUI component should smoothly appear or disappear in context of another component. \
// The duration of the transition is configured per default to take 500 ms.
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <670,650,870,690>
$output false
autoobject Effects::FadeInOutTransition FadeInOutCentered
{
  preset MarginLeft = 21;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
}

// The global autoobject Res::SlideLeftCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the right \
// edge of its owner component and continues moving horizontally until it reaches \
// the owner's center position. When using the transition for the fade-out operation, \
// the component slides to the left until it leaves the visible area of its owner \
// component. Additionally, while the transitions are performed, the opacity of the \
// GUI component fades-in or fades-out accordingly. This transition is thus ideal \
// wherever one GUI component should smoothly slide-in/out in context of another \
// component. The duration of the transition is configured per default to take 500 \
// ms and the timing is configured to start fast and then slow down the animation \
// (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <670,690,870,730>
$output false
autoobject Effects::SlideTransition SlideLeftCentered
{
  preset MarginBottom = 75;
  preset MarginRight = 21;
  preset MarginTop = 75;
  preset MarginLeft = 0;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Left;
}

$rect <879,493,1049,533>
$output false
const string HeartIcon = "\xe87d";

$rect <700,492,870,532>
$output false
const string BackspaceIcon = "\xe14a";

$rect <1101,880,1301,920>
$output false
const color PressColor = #F8F8F8D5;

$rect <700,532,870,572>
$output false
const string OutgoingCallIcon = "\xe0b2";

$rect <880,250,1050,290>
$output false
const string RemoveIcon = "\xe15b";

$rect <880,410,1050,450>
$output false
const string InfoIcon = "\xe88e";

$rect <880,290,1050,330>
$output false
const string MenuIcon = "\xe5d2";

$rect <9,209,209,249>
$output false
resource Resources::Bitmap SearchButton
{
  attr bitmapfile FileName = .\Res\PushButton.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// The global autoobject Res::SlideUpCentered1 represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the bottom \
// edge of its owner component and continues moving vertically until it reaches the \
// owner's center position. When using the transition for the fade-out operation, \
// the component slides up until it leaves the visible area of its owner component. \
// Additionally, while the transitions are performed, the opacity of the GUI component \
// fades-in or fades-out accordingly. This transition is thus ideal wherever one \
// GUI component should smoothly slide-in/out in context of another component. The \
// duration of the transition is configured per default to take 500 ms and the timing \
// is configured to start fast and then slow down the animation (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <670,850,870,890>
$output false
autoobject Effects::SlideTransition SlideUpCenteredLimit
{
  preset MarginRight = 21;
  preset MarginTop = 40;
  preset MarginLeft = 0;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Top;
}

$rect <1060,140,1260,180>
$output false
const string MissedCallIcon = "\xe0e4";

$rect <1060,180,1260,220>
$output false
const string IncomingCallIcon = "\xe0b5";

$rect <1060,220,1260,260>
$output false
const string CheckIcon = "\xe5ca";

$rect <1070,300,1270,340>
$output false
const string ChatIcon = "\xe0ca";

$rect <10,270,210,310>
$output false
resource Resources::Bitmap ChatRight
{
  attr bitmapfile FileName = .\Res\chatright.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize = <48,48>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <11,317,211,357>
$output false
resource Resources::Bitmap ChatLeft
{
  attr bitmapfile FileName = .\Res\chatleft.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1070,340,1270,380>
$output false
const string WriteIcon = "\xe745";

$rect <1070,380,1270,420>
$output false
const string PointIcon = "\xe836";

$rect <1070,420,1270,460>
$output false
const string SendIcon = "\xe163";

$rect <1070,460,1270,500>
$output false
const string ForwardIcon = "\xe5e1";

$rect <1280,40,1480,80>
$output false
resource Resources::Font IconsFont12
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 12;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe04b, 0xe0b0, 0xe87d, 0xe31a, 0xe14a, 0xe649, 0xe61c,0xe15b, 0xe88e, 0xe5d2, 0xe0b5, 0xe0e4, 0xe0b2,0xe5ca, 0xe745, 0xe836, 0xe163, 0xe5e1, 0xe836,0xe8b8;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <10,370,210,410>
$output false
resource Resources::Bitmap SuqareButton
{
  attr bitmapfile FileName = .\Res\squareButton.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <220,300,420,340>
$output false
resource Resources::Bitmap iphoneCase
{
  attr bitmapfile FileName = .\Res\pinkIphone.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1280,310,1480,350>
$output false
const string CircleIcon = "\xe836";

$rect <1280,90,1480,130>
$output false
resource Resources::Font IconsFont65
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 65;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe14a,0xe649, 0xe61c,0xe15b, 0xe88e, 0xe5d2, 0xe5ca, 0xe0ca, 0xe745, 0xe163, 0xe5e1, 0xe836,0xe8b8;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <1276,257,1476,297>
$output false
const string SettingsIcon = "\xe8b8";

$rect <220,340,420,380>
$output false
resource Resources::Bitmap background
{
  attr bitmapfile FileName = .\Res\backgound.jpg;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <230,380,430,420>
$output false
resource Resources::Bitmap logog
{
  attr bitmapfile FileName = .\Res\logo.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}
