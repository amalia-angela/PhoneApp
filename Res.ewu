$version 12.00

$rect <1052,286,1222,326>
$output false
const string CallIcon = "\xe0b0";

$rect <872,128,1042,168>
$output false
const string MessageIcon = "\xe253";

$rect <872,288,1042,328>
$output false
const string BackIcon = "\xe5e0";

$rect <872,248,1042,288>
$output false
const string EditIcon = "\xe3c9";

$rect <872,168,1042,208>
$output false
const string UserIcon = "\xe853";

$rect <872,208,1042,248>
$output false
const string PlusIcon = "\xe145";

$rect <872,328,1042,368>
$output false
const string SerachIcon = "\xe8b6";

$rect <872,368,1042,408>
$output false
const string CkeckIcon = "\xe876";

$rect <872,408,1042,448>
$output false
const string CloseIcon = "\xe5cd";

// Fonts
note group Fonts
{
  attr Bounds = <432,0,852,420>;
}

// The global autoobject Res::SlideDownCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the top \
// edge of its owner component and continues moving vertically until it reaches the \
// owner's center position. When using the transition for the fade-out operation, \
// the component slides down until it leaves the visible area of its owner component. \
// Additionally, while the transitions are performed, the opacity of the GUI component \
// fades-in or fades-out accordingly. This transition is thus ideal wherever one \
// GUI component should smoothly slide-in/out in context of another component. The \
// duration of the transition is configured per default to take 500 ms and the timing \
// is configured to start fast and then slow down the animation (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <880,830,1080,870>
$output false
autoobject Effects::SlideTransition SlideDownCentered
{
  preset MarginBottom = 75;
  preset MarginRight = 64;
  preset MarginTop = 75;
  preset MarginLeft = 64;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Bottom;
}

// The global autoobject Res::SlideUpCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the bottom \
// edge of its owner component and continues moving vertically until it reaches the \
// owner's center position. When using the transition for the fade-out operation, \
// the component slides up until it leaves the visible area of its owner component. \
// Additionally, while the transitions are performed, the opacity of the GUI component \
// fades-in or fades-out accordingly. This transition is thus ideal wherever one \
// GUI component should smoothly slide-in/out in context of another component. The \
// duration of the transition is configured per default to take 500 ms and the timing \
// is configured to start fast and then slow down the animation (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <880,790,1080,830>
$output false
autoobject Effects::SlideTransition SlideUpCentered
{
  preset MarginBottom = 75;
  preset MarginRight = 64;
  preset MarginTop = 75;
  preset MarginLeft = 0;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Top;
}

// The global autoobject Res::SlideRightCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the left \
// edge of its owner component and continues moving horizontally until it reaches \
// the owner's center position. When using the transition for the fade-out operation, \
// the component slides to the right until it leaves the visible area of its owner \
// component. Additionally, while the transitions are performed, the opacity of the \
// GUI component fades-in or fades-out accordingly. This transition is thus ideal \
// wherever one GUI component should smoothly slide-in/out in context of another \
// component. The duration of the transition is configured per default to take 500 \
// ms and the timing is configured to start fast and then slow down the animation \
// (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <880,750,1080,790>
$output false
autoobject Effects::SlideTransition SlideRightCentered
{
  preset MarginBottom = 75;
  preset MarginRight = 0;
  preset MarginTop = 75;
  preset MarginLeft = 64;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Right;
}

$rect <642,170,842,210>
$output false
resource Resources::Font TitileFont32
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 32;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF, 0x151;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <642,40,842,80>
$output false
resource Resources::Font ContactFont15
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 15;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF,0xE9;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <642,80,842,120>
$output false
resource Resources::Font ContactFontBold15
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 15;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF,0xE9;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = true;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <442,120,642,160>
$output false
resource Resources::Font IconsFont25
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 25;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe02b, 0xe029, 0xe31a, 0xe050, 0xe04b, 0xe145, 0xe853, 0xe0b1, 0xe3c9, 0xe5e0, 0xe8b6, 0xe876, 0xe5cd, 0xe5ce, 0xe5cf, 0xe02b, 0xe04e, 0xe0b0, 0xe14a, 0xe649, 0xe61c, 0xe15b,0xe88e, 0xe5d2, 0xe5ca, 0xe745, 0xe163, 0xe5e1, 0xe5e0, 0xe253, 0xe836, 0xe8b8, 0xef4a,0xe5cd;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <641,473,841,513>
$output false
const color BlueLight = #7C8FFFF4;

$rect <442,510,642,550>
$output false
const color Grey = #BCBCBCFD;

$rect <872,48,1042,88>
$output false
const string MicIcon = "\xe029";

$rect <872,88,1042,128>
$output false
const string MicOffIcon = "\xe02b";

$rect <1052,50,1222,90>
$output false
const string KeypadIcon = "\xe31a";

$rect <642,510,842,550>
$output false
const color GreyLight = #F0F0F0FD;

$rect <1052,88,1222,128>
$output false
const string SpeakerIcon = "\xe050";

$rect <442,710,642,750>
$output false
const color BlackComponents = #181818FF;

$rect <1052,168,1222,208>
$output false
const string EndCallIcon = "\xe0b1";

$rect <642,210,842,250>
$output false
resource Resources::Font TitileFont29
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 29;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <1052,128,1222,168>
$output false
const string VideoCallIcon = "\xe04b";

$rect <442,160,642,200>
$output false
resource Resources::Font IconsFont30
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 40;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe14a,0xe649, 0xe61c,0xe15b, 0xe88e, 0xe5d2, 0xe5ca, 0xe0ca, 0xe745, 0xe163, 0xe5e1, 0xe836, 0xe8b8, 0xef4a,0xe5cd;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

// Icon fonts
note group Note6
{
  attr Bounds = <862,0,1412,590>;
}

// Dark Mode
note group Dark
{
  attr Bounds = <0,430,420,810>;
}

$rect <442,80,642,120>
$output false
resource Resources::Font IconsFont20
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 20;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe04b, 0xe0b0, 0xe87d, 0xe31a, 0xe14a, 0xe649, 0xe61c,0xe15b, 0xe88e, 0xe5d2, 0xe0b5, 0xe0e4, 0xe0b2,0xe5ca, 0xe745, 0xe836, 0xe163, 0xe5e1, 0xe836,0xe8b8, 0xef4a,0xe5cd;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <642,250,842,290>
$output false
resource Resources::Font TitileFont25
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 25;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <642,670,842,710>
$output false
const color WhiteTransparent = #FFFFFF26;

$rect <442,550,642,590>
$output false
const color Red = #B5280FFF;

$rect <441,470,641,510>
$output false
const color Blue = #1B0BFFFF;

$rect <1232,50,1402,90>
$output false
const string DownIcon = "\xe5cf";

$rect <1052,328,1222,368>
$output false
const string UpIcon = "\xe5ce";

$rect <1052,408,1222,448>
$output false
const string SpeakeroffIcon = "\xe04e";

// Light Mode
note group Note8
{
  attr Bounds = <431,430,850,810>;
}

$rect <642,550,842,590>
$output false
const color RedLight = #E83C32EE;

$rect <642,120,842,160>
$output false
resource Resources::Font ContactFont12
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 12;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF, 0x151, 0xE9;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <642,630,842,670>
$output false
const color WhiteSemiTransparent = #FFFFFF73;

$rect <442,630,642,670>
$output false
const color WhiteComponents = #FFFFFFFF;

$rect <442,590,642,630>
$output false
const color Green = #129915FF;

$rect <642,590,842,630>
$output false
const color GreenDark = #0C6B0EFF;

$rect <442,670,642,710>
$output false
const color Transparent = #FFFFFF00;

// Bitmaps
note group Note5
{
  attr Bounds = <0,0,420,420>;
}

$rect <10,90,210,130>
$output false
resource Resources::Bitmap ButtonRoundMedium
{
  attr bitmapfile FileName = .\Res\circleMedium.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,50,210,90>
$output false
resource Resources::Bitmap ButtonRoundBig
{
  attr bitmapfile FileName = .\Res\circleBig.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,170,210,210>
$output false
resource Resources::Bitmap ButtonRoundSmall
{
  attr bitmapfile FileName = .\Res\circleSmall.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <10,130,210,170>
$output false
resource Resources::Bitmap ButtonRoundMedium1
{
  attr bitmapfile FileName = .\Res\callButton.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// The global autoobject Res::FadeInOutCentered represents the fade-in/out operation \
// affecting the opacity of a given GUI component. When using the transition for \
// the fade-in operation, the GUI component is automatically arranged to appear centered \
// within the area of its owner component. This transition is thus ideal wherever \
// one GUI component should smoothly appear or disappear in context of another component. \
// The duration of the transition is configured per default to take 500 ms.
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <880,670,1080,710>
$output false
autoobject Effects::FadeInOutTransition FadeInOutCentered
{
  preset MarginLeft = 64;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
}

// The global autoobject Res::SlideLeftCentered represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the right \
// edge of its owner component and continues moving horizontally until it reaches \
// the owner's center position. When using the transition for the fade-out operation, \
// the component slides to the left until it leaves the visible area of its owner \
// component. Additionally, while the transitions are performed, the opacity of the \
// GUI component fades-in or fades-out accordingly. This transition is thus ideal \
// wherever one GUI component should smoothly slide-in/out in context of another \
// component. The duration of the transition is configured per default to take 500 \
// ms and the timing is configured to start fast and then slow down the animation \
// (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <880,710,1080,750>
$output false
autoobject Effects::SlideTransition SlideLeftCentered
{
  preset MarginBottom = 75;
  preset MarginRight = 64;
  preset MarginTop = 75;
  preset MarginLeft = 0;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Left;
}

$rect <1051,451,1221,491>
$output false
const string HeartIcon = "\xe87d";

$rect <872,450,1042,490>
$output false
const string BackspaceIcon = "\xe14a";

$rect <642,710,842,750>
$output false
const color PressColor = #F8F8F8D5;

$rect <872,490,1042,530>
$output false
const string OutgoingCallIcon = "\xe0b2";

$rect <1052,208,1222,248>
$output false
const string RemoveIcon = "\xe15b";

$rect <1052,368,1222,408>
$output false
const string InfoIcon = "\xe88e";

$rect <1052,248,1222,288>
$output false
const string MenuIcon = "\xe5d2";

$rect <9,209,209,249>
$output false
resource Resources::Bitmap SearchButton
{
  attr bitmapfile FileName = .\Res\PushButton.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// The global autoobject Res::SlideUpCentered1 represents the fade-in/out operation \
// affecting the position and the opacity of the given GUI component. When using \
// the transition for the fade-in operation, the GUI component slides from the bottom \
// edge of its owner component and continues moving vertically until it reaches the \
// owner's center position. When using the transition for the fade-out operation, \
// the component slides up until it leaves the visible area of its owner component. \
// Additionally, while the transitions are performed, the opacity of the GUI component \
// fades-in or fades-out accordingly. This transition is thus ideal wherever one \
// GUI component should smoothly slide-in/out in context of another component. The \
// duration of the transition is configured per default to take 500 ms and the timing \
// is configured to start fast and then slow down the animation (FastIn_EaseOut).
// This object exists for your convenience permitting you to simply refer the transition \
// wherever it is required in your implementation without having to take care of \
// the creation and configuration of the object. If you require the transition to \
// run with other configuration (e.g. other timing parameters), create a copy of \
// this object and adapt its properties accordingly.
$rect <880,870,1080,910>
$output false
autoobject Effects::SlideTransition SlideUpCenteredLimit
{
  preset MarginRight = 64;
  preset MarginTop = 40;
  preset MarginLeft = 0;
  preset Alignment = Effects::DialogAlignment[AlignHorzLeft, AlignVertCenter];
  preset Duration = 200;
  preset Direction = Core::Direction.Top;
}

$rect <1232,90,1402,130>
$output false
const string MissedCallIcon = "\xe0e4";

$rect <1232,130,1402,170>
$output false
const string IncomingCallIcon = "\xe0b5";

$rect <1232,170,1402,210>
$output false
const string CheckIcon = "\xe5ca";

$rect <1232,250,1402,290>
$output false
const string ChatIcon = "\xe0ca";

$rect <10,270,210,310>
$output false
resource Resources::Bitmap ChatRight
{
  attr bitmapfile FileName = .\Res\chatright.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize = <48,48>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <11,317,211,357>
$output false
resource Resources::Bitmap ChatLeft
{
  attr bitmapfile FileName = .\Res\chatleft.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1232,290,1402,330>
$output false
const string WriteIcon = "\xe745";

$rect <1232,330,1402,370>
$output false
const string PointIcon = "\xe836";

$rect <1232,370,1402,410>
$output false
const string SendIcon = "\xe163";

$rect <1232,410,1402,450>
$output false
const string ForwardIcon = "\xe5e1";

$rect <442,40,642,80>
$output false
resource Resources::Font IconsFont12
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 12;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe04b, 0xe0b0, 0xe87d, 0xe31a, 0xe14a, 0xe649, 0xe61c,0xe15b, 0xe88e, 0xe5d2, 0xe0b5, 0xe0e4, 0xe0b2,0xe5ca, 0xe745, 0xe836, 0xe163, 0xe5e1, 0xe836,0xe8b8, 0xef4a, 0xe5cd;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <10,370,210,410>
$output false
resource Resources::Bitmap SuqareButton
{
  attr bitmapfile FileName = .\Res\squareButton.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <210,50,410,90>
$output false
resource Resources::Bitmap iphoneCase
{
  attr bitmapfile FileName = .\Res\phoneOutline.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1232,450,1402,490>
$output false
const string CircleIcon = "\xe836";

$rect <442,200,642,240>
$output false
resource Resources::Font IconsFont65
{
  attr fontname FontName = Material Icons;
  attr fontheight Height = 65;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0xe0b0, 0xe253, 0xe853, 0xe145, 0xe5e0, 0xe3c9, 0xe8b6, 0xe876, 0xe5cd, 0xe14a,0xe649, 0xe61c,0xe15b, 0xe88e, 0xe5d2, 0xe5ca, 0xe0ca, 0xe745, 0xe163, 0xe5e1, 0xe836,0xe8b8, 0xef4a,0xe5cd;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <1052,488,1222,528>
$output false
const string SettingsIcon = "\xe8b8";

$rect <210,90,410,130>
$output false
resource Resources::Bitmap background
{
  attr bitmapfile FileName = .\Res\backgound.jpg;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <210,150,410,190>
$output false
resource Resources::Bitmap logog
{
  attr bitmapfile FileName = .\Res\logo.png;
  attr bitmapformat Format = Alpha8;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <440,750,640,790>
$output false
const color BlueLight1 = #7C8FFF3E;

$rect <1232,490,1402,530>
$output false
const string CircleFillIcon = "\xef4a";

$rect <1232,210,1402,250>
$output false
const string XIcon = "\xe5cd";

$rect <210,190,410,230>
$output false
resource Resources::Bitmap Logo
{
  attr bitmapfile FileName = .\Res\logoandtext.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

// Effects
note group Note9
{
  attr Bounds = <860,600,1280,950>;
}

$rect <211,473,411,513>
$variant DarkMode
vconst BlueLight2 : Res::BlueLight = #6F80E5F4;

$rect <12,510,212,550>
$variant DarkMode
vconst Grey1 : Res::Grey;

$rect <212,510,412,550>
$variant DarkMode
vconst GreyLight1 : Res::GreyLight = #222222FD;

$rect <12,710,212,750>
$variant DarkMode
vconst Black1 : Res::BlackComponents = #FFFFFFFF;

$rect <212,670,412,710>
$variant DarkMode
vconst WhiteTransparent1 : Res::WhiteTransparent = #FFFFFF26;

$rect <12,550,212,590>
$variant DarkMode
vconst Red1 : Res::Red;

$rect <11,470,211,510>
$variant DarkMode
vconst Blue1 : Res::Blue = #006DFFFF;

$rect <212,550,412,590>
$variant DarkMode
vconst RedLight1 : Res::RedLight;

$rect <212,630,412,670>
$variant DarkMode
vconst WhiteSemiTransparent1 : Res::WhiteSemiTransparent = #0C0C0C73;

$rect <12,630,212,670>
$variant DarkMode
vconst White1 : Res::WhiteComponents = #181818FF;

$rect <12,590,212,630>
$variant DarkMode
vconst Green1 : Res::Green;

$rect <212,590,412,630>
$variant DarkMode
vconst GreenDark1 : Res::GreenDark;

$rect <12,670,212,710>
$variant DarkMode
vconst Transparent1 : Res::Transparent = #00000000;

$rect <212,710,412,750>
$variant DarkMode
vconst PressColor1 : Res::PressColor = #0B0B0BD5;

$rect <10,750,210,790>
$variant DarkMode
vconst BlueLight3 : Res::BlueLight1;

$rect <640,750,840,790>
$output false
const color WhiteBackgound =
(
  Default = #F7F7F7FF;
  Magyar = #F7F7F7FF;
);

$rect <450,850,650,890>
$output false
const color Black = #181818FF;

$rect <450,810,650,850>
$output false
const color White = #FFFFFFFF;

$rect <220,800,420,840>
vconst Black2 : Res::Black = #222222FF;

$rect <220,760,420,800>
vconst White2 : Res::White = #FBFBFBFF;

$rect <10,800,210,840>
$variant DarkMode
vconst WhiteBackgound1 : Res::WhiteBackgound =
(
  Default = #222222FF;
  Magyar = #222222FF;
);
